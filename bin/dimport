#! /usr/bin/env bash
#
# The dimport command script.
#
# TODO: Narrow the amount of duplicated code.
#
# Environment Variables:
#
#   JAVA_HOME        The java implementation to use.  Overrides JAVA_HOME.
#
#   DIMPORT_CLASSPATH  Extra Java CLASSPATH entries.
#
#   DIMPORT_HEAPSIZE   The maximum amount of heap to use, in MB.
#                    Default is 1000.
#
#   DIMPORT_CONF_DIR   Alternate conf dir. Default is ${DIMPORT_HOME}/conf.
#
#   DIMPORT_ROOT_LOGGER The root appender. Default is INFO,console
#
#
bin=`dirname "$0"`
bin=`cd "$bin">/dev/null; pwd`

# This will set DIMPORT_HOME, etc.
. "$bin"/dimport-config.sh

cygwin=false
case "`uname`" in
CYGWIN*) cygwin=true;;
esac

# Detect if we are in hbase sources dir
in_dev_env=false
if [ -d "${DIMPORT_HOME}/target" ]; then
  in_dev_env=true
fi

# if no args specified, show usage
if [ $# = 0 ]; then
  echo "Usage: hbase [<options>] <command> [<args>]"
  echo "Options:"
  echo "  --config DIR    Configuration direction to use. Default: ./conf"
  echo "  --hosts HOSTS   Override the list in 'regionservers' file"
  echo ""
  echo "Commands:"
  echo "Some commands take arguments. Pass no args or -h for usage."
  echo "  master          Run an HBase HMaster node"
  echo "  clean           Run the DIMPORT clean up script"
  echo "  classpath       Dump hbase CLASSPATH"
  echo "  version         Print the version"
  echo "  CLASSNAME       Run the class named CLASSNAME"
  exit 1
fi

# get arguments
COMMAND=$1
shift

JAVA=$JAVA_HOME/bin/java
JAVA_HEAP_MAX=-Xmx1000m

# override default settings for this command, if applicable
if [ -f "$DIMPORT_HOME/conf/dimport-env.sh" ]; then
  . "$DIMPORT_HOME/conf/dimport-env.sh"
fi
if [ -f "$DIMPORT_HOME/conf/dimport-env.sh" ]; then
  . "$DIMPORT_HOME/bin/dimport-config.sh"
fi

# check envvars which might override default args
if [ "$DIMPORT_HEAPSIZE" != "" ]; then
  #echo "run with heapsize $DIMPORT_HEAPSIZE"
  JAVA_HEAP_MAX="-Xmx""$DIMPORT_HEAPSIZE""m"
  #echo $JAVA_HEAP_MAX
fi

# so that filenames w/ spaces are handled correctly in loops below
ORIG_IFS=$IFS
IFS=

# CLASSPATH initially contains $DIMPORT_CONF_DIR
CLASSPATH="${DIMPORT_CONF_DIR}"
CLASSPATH=${CLASSPATH}:$JAVA_HOME/lib/tools.jar

add_to_cp_if_exists() {
  if [ -d "$@" ]; then
    CLASSPATH=${CLASSPATH}:"$@"
  fi
}

# For releases, add hbase & webapps to CLASSPATH
# Webapps must come first else it messes up Jetty
if [ -d "$DIMPORT_HOME/webapps" ]; then
  add_to_cp_if_exists "${DIMPORT_HOME}"
fi

add_maven_deps_to_classpath() {
  f="${DIMPORT_HOME}/target/cached_classpath.txt"
  if [ ! -f "${f}" ]
  then
      echo "As this is a development environment, we need ${f} to be generated from maven (command: mvn install -DskipTests)"
      exit 1
  fi
  CLASSPATH=${CLASSPATH}:`cat "${f}"`
}


#Add the development env class path stuff
if $in_dev_env; then
  add_maven_deps_to_classpath
fi

#add the dimport jars for each module
for f in $DIMPORT_HOME/dimport*.jar; do
	if [[ $f = *sources.jar ]]
  then
    : # Skip sources.jar
  elif [ -f $f ]
  then
    CLASSPATH=${CLASSPATH}:$f;
  fi
done

# Add libs to CLASSPATH
for f in $DIMPORT_HOME/lib/*; do
  if [[ $f = *.jar ]]
  then
    CLASSPATH=${CLASSPATH}:$f;
  elif [ -d $f ]
  then
  for sf in $f/*.jar; do
      CLASSPATH=${CLASSPATH}:$sf;
  done
  fi
done


# Add user-specified CLASSPATH first
if [ "$DIMPORT_CLASSPATH" != "" ]; then
  CLASSPATH=${DIMPORT_CLASSPATH}:${CLASSPATH}
fi

# default log directory & file
if [ "$DIMPORT_LOG_DIR" = "" ]; then
  DIMPORT_LOG_DIR="$DIMPORT_HOME/logs"
fi
if [ "$DIMPORT_LOGFILE" = "" ]; then
  DIMPORT_LOGFILE='dimport.log'
fi

# cygwin path translation
if $cygwin; then
  CLASSPATH=`cygpath -p -w "$CLASSPATH"`
  DIMPORT_HOME=`cygpath -d "$DIMPORT_HOME"`
  DIMPORT_LOG_DIR=`cygpath -d "$DIMPORT_LOG_DIR"`
fi

function append_path() {
  if [ -z "$1" ]; then
    echo $2
  else
    echo $1:$2
  fi
}


# cygwin path translation
if $cygwin; then
  JAVA_LIBRARY_PATH=`cygpath -p "$JAVA_LIBRARY_PATH"`
fi

# restore ordinary behaviour
unset IFS

#Set the right GC options based on the what we are running
declare -a server_cmds=("master")
for cmd in ${server_cmds[@]}; do
	if [[ $cmd == $COMMAND ]]; then
		server=true
		break
	fi
done


# figure out which class to run
if [ "$COMMAND" = "master" ] ; then
  CLASS='com.ery.dimport.daemon.DImportMasterStart'
elif [ "$COMMAND" = "clean" ] ; then
  case $1 in
    --cleanZk)
      matches="yes" ;;
    *) ;;
  esac
  if [ $# -ne 1 -o "$matches" = "" ]; then
    echo "Usage: hbase clean (--cleanZk)"
    echo "Options: "
    echo "        --cleanZk   cleans dimport related data from zookeeper."
    exit 1;
  fi
  CLASS='com.ery.dimport.daemon.CleanData'

elif [ "$COMMAND" = "classpath" ] ; then
  echo $CLASSPATH
  exit 0
elif [ "$COMMAND" = "version" ] ; then
  CLASS='com.ery.server.util.VersionInfo'
else
  CLASS=$COMMAND
fi

# Have JVM dump heap if we run out of memory.  Files will be 'launch directory'
# and are named like the following: java_pid21612.hprof. Apparently it doesn't
# 'cost' to have this flag enabled. Its a 1.6 flag only. See:
# http://blogs.sun.com/alanb/entry/outofmemoryerror_looks_a_bit_better
DIMPORT_OPTS="$DIMPORT_OPTS -Ddimport.log.dir=$DIMPORT_LOG_DIR"
DIMPORT_OPTS="$DIMPORT_OPTS -Ddimport.log.file=$DIMPORT_LOGFILE"
DIMPORT_OPTS="$DIMPORT_OPTS -Ddimport.home.dir=$DIMPORT_HOME"
DIMPORT_OPTS="$DIMPORT_OPTS -Ddimport.id.str=$DIMPORT_IDENT_STRING"
DIMPORT_OPTS="$DIMPORT_OPTS -Ddimport.root.logger=${DIMPORT_ROOT_LOGGER:-INFO,console}"
if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
  DIMPORT_OPTS="$DIMPORT_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH"
  export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$JAVA_LIBRARY_PATH"
fi

# Exec unless DIMPORT_NOEXEC is set.

export CLASSPATH
if [ "${DIMPORT_NOEXEC}" != "" ]; then
  "$JAVA" -Dproc_$COMMAND $DEBUG -XX:OnOutOfMemoryError="kill -9 %p" $JAVA_HEAP_MAX $DIMPORT_OPTS $CLASS "$@"
else
  exec "$JAVA" -Dproc_$COMMAND  $DEBUG -XX:OnOutOfMemoryError="kill -9 %p" $JAVA_HEAP_MAX $DIMPORT_OPTS $CLASS "$@"
fi
